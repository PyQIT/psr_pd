import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class MovieDaoImpl__MapperGenerated extends DaoBase implements MovieDao {
  private static final Logger LOG = LoggerFactory.getLogger(MovieDaoImpl__MapperGenerated.class);

  private final MovieHelper__MapperGenerated movieHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement getByIdStatement;

  private final PreparedStatement getByIdMovieStatement;

  private final PreparedStatement updateByTitleStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement getAllStatement;

  private MovieDaoImpl__MapperGenerated(MapperContext context,
      MovieHelper__MapperGenerated movieHelper, PreparedStatement saveStatement,
      PreparedStatement getByIdStatement, PreparedStatement getByIdMovieStatement,
      PreparedStatement updateByTitleStatement, PreparedStatement deleteStatement,
      PreparedStatement getAllStatement) {
    super(context);
    this.movieHelper = movieHelper;
    this.saveStatement = saveStatement;
    this.getByIdStatement = getByIdStatement;
    this.getByIdMovieStatement = getByIdMovieStatement;
    this.updateByTitleStatement = updateByTitleStatement;
    this.deleteStatement = deleteStatement;
    this.getAllStatement = getAllStatement;
  }

  @Override
  public Movie save(Movie movie) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    movieHelper.set(movie, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET);

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, movieHelper);
  }

  @Override
  public Optional<Movie> getById(int id) {
    BoundStatementBuilder boundStatementBuilder = getByIdStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.setInt("id", id);

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToOptionalEntity(boundStatement, movieHelper);
  }

  @Override
  public Movie getByIdMovie(int id) {
    BoundStatementBuilder boundStatementBuilder = getByIdMovieStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.setInt("id", id);

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, movieHelper);
  }

  @Override
  public void updateByTitle(Movie movie, int id, String title) {
    BoundStatementBuilder boundStatementBuilder = updateByTitleStatement.boundStatementBuilder();
    movieHelper.set(movie, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET);

    boundStatementBuilder = boundStatementBuilder.setInt("id", id);

    boundStatementBuilder = boundStatementBuilder.set("title", title, String.class);

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Movie movie) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();

    boundStatementBuilder = boundStatementBuilder.setInt("id", movie.getId());

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public PagingIterable<Movie> getAll() {
    BoundStatementBuilder boundStatementBuilder = getAllStatement.boundStatementBuilder();

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, movieHelper);
  }

  public static CompletableFuture<MovieDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      MovieHelper__MapperGenerated movieHelper = new MovieHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        movieHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(Movie)`:
      SimpleStatement saveStatement_simple = movieHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(Movie)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `getById(int)`:
      SimpleStatement getByIdStatement_simple = movieHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method getById(int)",
          context.getSession().getName(),
          getByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByIdStatement = prepare(getByIdStatement_simple, context);
      prepareStages.add(getByIdStatement);
      // Prepare the statement for `getByIdMovie(int)`:
      SimpleStatement getByIdMovieStatement_simple = movieHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method getByIdMovie(int)",
          context.getSession().getName(),
          getByIdMovieStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByIdMovieStatement = prepare(getByIdMovieStatement_simple, context);
      prepareStages.add(getByIdMovieStatement);
      // Prepare the statement for `updateByTitle(Movie,int,java.lang.String)`:
      SimpleStatement updateByTitleStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)movieHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method updateByTitle(Movie,int,java.lang.String)",
          context.getSession().getName(),
          updateByTitleStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateByTitleStatement = prepare(updateByTitleStatement_simple, context);
      prepareStages.add(updateByTitleStatement);
      // Prepare the statement for `delete(Movie)`:
      SimpleStatement deleteStatement_simple = movieHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(Movie)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `getAll()`:
      SimpleStatement getAllStatement_simple = movieHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method getAll()",
          context.getSession().getName(),
          getAllStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getAllStatement = prepare(getAllStatement_simple, context);
      prepareStages.add(getAllStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (MovieDao) new MovieDaoImpl__MapperGenerated(context,
              movieHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(getByIdStatement),
              CompletableFutures.getCompleted(getByIdMovieStatement),
              CompletableFutures.getCompleted(updateByTitleStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(getAllStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static MovieDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
